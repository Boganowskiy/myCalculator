{"version":3,"sources":["components/Keyboard.jsx","functions/operators.js","functions/clearingButtons.js","functions/checkValueType.js","functions/buildRPN.js","functions/calcFromRPN.js","functions/calcResultValue.js","functions/tokenize.js","components/App.jsx","index.jsx"],"names":["buttonsArr","Keyboard","props","onClickHandle","onEqualBtnClickHandle","calcState","className","map","el","type","key","value","onTouchStart","onMouseDown","onTouchEnd","e","preventDefault","disabled","priority","operation","a","b","Number","toFixed","associativity","_a","BS","expr","slice","C","isOperator","symb","Object","prototype","hasOwnProperty","call","operators","isNumber","isNaN","isOpenBracket","isClosingBracket","buildRPN","tokens","operatorsStack","polishNotationArray","reduce","rpn","token","check","push","i","length","pop","headOfStack","headStack","current","reverse","calcFromRPN","Error","operandsStack","item","result","string","tokenized","inputString","currentNumber","bracketsBalance","prevItem","tokenize","message","App","state","displayValue","calculatorState","target","newState","clearingButtons","setState","resultValue","calcResultValue","this","name","id","readOnly","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.179ac0b1.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\n\nconst buttonsArr = [\n  '(', ')', 'BS', '-',\n  '7', '8', '9', '+',\n  '4', '5', '6', '*',\n  '1', '2', '3', '/',\n  '0', '.', 'C', '=',\n];\n\nconst Keyboard = (props) => {\n  const { onClickHandle, onEqualBtnClickHandle, calcState } = props;\n  return (\n    <div className=\"keyboard\">\n      {buttonsArr.map((el) => {\n        if (el !== '=') {\n          return (\n            <button\n              type=\"button\"\n              className=\"button\"\n              key={el}\n              value={el}\n              onTouchStart={onClickHandle}\n              onMouseDown={onClickHandle}\n              onTouchEnd={(e) => e.preventDefault()}\n            >\n              {el}\n            </button>\n          );\n        }\n        return (\n          <button\n            type=\"button\"\n            className=\"button equalBtn\"\n            key={el}\n            value={el}\n            disabled={calcState === 'result'}\n            onTouchStart={onEqualBtnClickHandle}\n            onMouseDown={onEqualBtnClickHandle}\n            onTouchEnd={(e) => e.preventDefault()}\n          >\n            {el}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n\nKeyboard.propTypes = {\n  onEqualBtnClickHandle: propTypes.func.isRequired,\n  onClickHandle: propTypes.func.isRequired,\n  calcState: propTypes.string.isRequired,\n};\n\nexport default Keyboard;\n","export default {\n  '+': {\n    priority: 13,\n    operation: (a, b) => Number((a + b).toFixed(15)),\n    associativity: 'left',\n    type: 'binary',\n  },\n  '-': {\n    priority: 13,\n    operation: (a, b) => Number((a - b).toFixed(15)),\n    associativity: 'left',\n    type: 'binary',\n  },\n  '*': {\n    priority: 14,\n    operation: (a, b) => Number((a * b).toFixed(15)),\n    associativity: 'left',\n    type: 'binary',\n  },\n  '/': {\n    priority: 14,\n    operation: (a, b) => Number((a / b).toFixed(15)),\n    associativity: 'left',\n    type: 'binary',\n  },\n  '(': {\n    priority: 0,\n    operation: () => null,\n    associativity: 'not',\n    type: 'group',\n  },\n  ')': {\n    priority: 0,\n    operation: () => null,\n    associativity: 'not',\n    type: 'group',\n  },\n  'un-': {\n    priority: 16,\n    operation: (_a, b) => 0 - b,\n    associativity: 'right',\n    type: 'unary',\n  },\n};\n","export default {\n  BS: {\n    operation: (expr) => expr.slice(0, -1),\n  },\n  C: {\n    operation: (expr) => '',\n  },\n}\n","import operators from './operators';\nimport clearingButtons from './clearingButtons';\n\nexport const isOperator = (symb) => Object.prototype.hasOwnProperty.call(operators, symb);\n\nexport const isNumber = (symb) => !Number.isNaN(+symb) && typeof (+symb) === 'number';\n\nexport const isClearingBtn = (symb) => Object.prototype.hasOwnProperty.call(clearingButtons, symb);\n\nexport const isOpenBracket = (symb) => symb === '(';\n\nexport const isClosingBracket = (symb) => symb === ')';\n\nexport const isCurrentPriorityLess = (current, headStack) => (\n  (operators[current].priority < operators[headStack].priority)\n);\n\nexport const isEqualPriorities = (current, headStack) => (\n  operators[current].priority === operators[headStack].priority\n);\n","import * as check from './checkValueType';\nimport operators from './operators';\n\nconst buildRPN = (tokens) => {\n  const operatorsStack = [];\n  const polishNotationArray = tokens.reduce((rpn, token) => {\n    if (check.isNumber(token)) {\n      return [...rpn, token];\n    }\n    if (check.isOperator(token)) {\n      if (check.isOpenBracket(token)) {\n        operatorsStack.push(token);\n        return rpn;\n      }\n      if (check.isClosingBracket(token)) {\n        for (let i = operatorsStack.length - 1; i >= 0; i -= 1) {\n          if (operatorsStack[i] === '(') {\n            operatorsStack.pop();\n            return rpn;\n          }\n          rpn.push(operatorsStack.pop());\n        }\n        return rpn;\n      }\n      const headOfStack = operatorsStack[operatorsStack.length - 1];\n      if (!headOfStack) {\n        operatorsStack.push(token);\n        return rpn;\n      }\n      if (check.isCurrentPriorityLess(token, headOfStack)\n        || ((operators[headOfStack].associativity === 'left' && check.isEqualPriorities(token, headOfStack)))\n      ) {\n        operatorsStack.pop();\n        operatorsStack.push(token);\n        return [...rpn, headOfStack];\n      }\n      operatorsStack.push(token);\n      return rpn;\n    }\n    return rpn;\n  }, []);\n  const resultRpn = [...polishNotationArray, ...operatorsStack.reverse()];\n  return resultRpn;\n};\n\nexport default buildRPN;\n","import operators from './operators';\nimport { isOperator, isNumber } from './checkValueType';\n\nconst calcFromRPN = (rpn) => {\n  if (rpn.length <= 1) {\n    if (isNumber(rpn[0])) {\n      return rpn[0];\n    }\n    throw new Error('Please, enter expression');\n  }\n  const res = rpn.reduce((operandsStack, item) => {\n    if (isOperator(item)) {\n      const b = operandsStack.pop();\n      const a = (operators[item].type === 'binary') ? operandsStack.pop() : null;\n      const result = operators[item].operation(a, b);\n      if (Number.isNaN(result) || result === null) {\n        throw new Error('invalid expression');\n      }\n      operandsStack.push(result);\n    } else {\n      operandsStack.push(item);\n    }\n    return operandsStack;\n  }, []);\n  return res[0];\n};\n\nexport default calcFromRPN;\n","import tokenize from './tokenize';\nimport buildRPN from './buildRPN';\nimport calcFromRPN from './calcFromRPN';\n\nexport default (string) => {\n  try {\n    const tokenized = tokenize(string);\n    const polishNotationArray = buildRPN(tokenized);\n    const result = calcFromRPN(polishNotationArray);\n    return result;\n  } catch (e) {\n    return (e.message);\n  }\n};\n","import {\n  isNumber, isOperator, isOpenBracket, isClosingBracket,\n} from './checkValueType';\n\nexport default (inputString) => {\n  let currentNumber = '';\n  const result = [];\n  let bracketsBalance = 0;\n  for (let i = 0; i <= inputString.length; i += 1) {\n    const item = inputString[i];\n    if (isNumber(item) || item === '.') {\n      currentNumber += item;\n    } else if (isOperator(item)) {\n      if (currentNumber !== '') {\n        result.push(Number(currentNumber));\n        currentNumber = '';\n      }\n      if (item !== '-') {\n        if (isOpenBracket(item)) bracketsBalance += 1;\n        if (isClosingBracket(item)) bracketsBalance -= 1;\n        result.push(item);\n      } else if (item === '-') {\n        const prevItem = inputString[i - 1];\n        if (!prevItem || (isOperator(prevItem) && prevItem !== ')')) {\n          result.push('un-');\n        } else {\n          result.push(item);\n        }\n      }\n    }\n    if (i === inputString.length && currentNumber !== '') {\n      result.push(Number(currentNumber));\n    }\n  }\n  if (bracketsBalance !== 0) {\n    throw new Error('invalid expression');\n  }\n  return result;\n};\n","import React from 'react';\nimport Keyboard from './Keyboard';\nimport '../style/styles.css';\nimport { isNumber, isClearingBtn } from '../functions/checkValueType';\nimport clearingButtons from '../functions/clearingButtons';\nimport calcResultValue from '../functions/calcResultValue';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayValue: '0',\n      calculatorState: 'result',\n    };\n  }\n\n  onClickHandle = (e) => {\n    e.preventDefault();\n    const { displayValue, calculatorState } = this.state;\n    const { value } = e.target;\n    const newState = {\n      displayValue: `${displayValue}${value}`,\n    };\n\n    if (calculatorState === 'result') {\n      if (isNumber(value)) {\n        newState.displayValue = value;\n      }\n    }\n    if (isClearingBtn(value)) {\n      newState.displayValue = clearingButtons[value].operation(displayValue);\n    }\n\n    this.setState({\n      displayValue: newState.displayValue,\n      calculatorState: 'typing',\n    });\n  }\n\n  onEqualBtnClickHandle = (e) => {\n    e.preventDefault();\n    const { displayValue } = this.state;\n    const resultValue = calcResultValue(displayValue);\n    this.setState({\n      displayValue: resultValue,\n      calculatorState: 'result',\n    });\n  }\n\n  render() {\n    const { displayValue, calculatorState } = this.state;\n    return (\n      <div className=\"board\">\n        <input type=\"text\" name=\"display\" id=\"display\" readOnly value={displayValue} />\n        <Keyboard\n          onClickHandle={this.onClickHandle}\n          onEqualBtnClickHandle={this.onEqualBtnClickHandle}\n          calcState={calculatorState}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './components/App';\n\nReactDom.render(\n  <App />,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}